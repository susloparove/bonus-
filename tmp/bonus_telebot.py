import telebot
from telebot import types
import requests
import json
import os
from datetime import datetime
from typing import Optional
import logging
from colorama import init, Fore

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è Windows
init(autoreset=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger('BonusBot')
logger.setLevel(logging.DEBUG)


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏
class ColorFormatter(logging.Formatter):
    def format(self, record):
        color = {
            'DEBUG': Fore.CYAN,
            'INFO': Fore.GREEN,
            'WARNING': Fore.YELLOW,
            'ERROR': Fore.RED,
            'CRITICAL': Fore.RED
        }.get(record.levelname, Fore.WHITE)
        return f"{color}{super().format(record)}"


console_handler = logging.StreamHandler()
console_handler.setFormatter(ColorFormatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(console_handler)


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
def load_config():
    try:
        with open('../config.json', 'r') as f:
            config = json.load(f)
            logger.info("–ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return config
    except FileNotFoundError:
        logger.error("–°–æ–∑–¥–∞–π—Ç–µ config.json –ø–æ –æ–±—Ä–∞–∑—Ü—É config.json.example")
        exit(1)


config = load_config()
BASE_URL = config['base_url']

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
try:
    requests.get(f"{BASE_URL}/docs", timeout=3)
    logger.info("–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
except requests.exceptions.RequestException as e:
    logger.error(f"–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(config['telegram_bot_token'])
user_states = {}


class UserState:
    def __init__(self):
        self.phone: Optional[str] = None
        self.current_action: Optional[str] = None


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def validate_phone(phone: str) -> bool:
    return phone.isdigit() and len(phone) == 11


def validate_date(date_str: str) -> bool:
    try:
        datetime.strptime(date_str, '%d/%m/%Y')
        return True
    except ValueError:
        return False


def format_client_info(data: dict) -> str:
    total = sum(t['amount'] if t['type'] == 'deposit' else -t['amount']
                for t in data.get('transactions', []))

    return (f"*–ò–º—è:* {data['name']}\n"
            f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {data['phone']}\n"
            f"*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* {data['birth_date']}\n"
            f"*–ë–æ–Ω—É—Å—ã:* {total}\n\n"
            "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n" +
            "\n".join([f"- {t['type']} {t['amount']} ({t['timestamp'][:10]})"
                       for t in data.get('transactions', [])]))


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–°–º–µ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"
def show_main_menu(chat_id: int):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
        types.InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_bonus"),
        types.InlineKeyboardButton("–°–ø–∏—Å–∞—Ç—å", callback_data="deduct_bonus"),
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="add_client"),
        types.InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="change_client")
    ]
    markup.add(*buttons)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    user_states[chat_id] = UserState()
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ (11 —Ü–∏—Ñ—Ä):")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∞–ª —Å–µ—Å—Å–∏—é")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(func=lambda msg: msg.chat.id in user_states)
def handle_input(message):
    chat_id = message.chat.id
    state = user_states[chat_id]

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    if state.current_action == 'change_client':
        state.phone = None
        state.current_action = None

    # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not state.phone:
        phone = message.text.strip().replace('+', '')
        if not validate_phone(phone):
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ 11 —Ü–∏—Ñ—Ä:")
            return
        state.phone = phone
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –∫–ª–∏–µ–Ω—Ç–∞: {phone}")
        show_main_menu(chat_id)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    if state.current_action == 'add_client':
        process_add_client(message)
    elif state.current_action in ('add_bonus', 'deduct_bonus'):
        process_bonus(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    state = user_states.get(chat_id)

    if not state:
        bot.send_message(chat_id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        return

    try:
        if call.data == "info":
            response = requests.get(f"{BASE_URL}/customers/{state.phone}")

            if response.status_code == 200:
                bot.send_message(chat_id, format_client_info(response.json()), parse_mode='Markdown')
            elif response.status_code == 404:
                bot.send_message(chat_id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                logger.warning(f"–ö–ª–∏–µ–Ω—Ç {state.phone} –Ω–µ –Ω–∞–π–¥–µ–Ω (chat_id: {chat_id})")
                state.phone = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            else:
                bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")

        elif call.data in ("add_bonus", "deduct_bonus"):
            state.current_action = call.data
            action = "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è" if call.data == "add_bonus" else "—Å–ø–∏—Å–∞–Ω–∏—è"
            bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è {action}:")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∞–ª –æ–ø–µ—Ä–∞—Ü–∏—é {action}")

        elif call.data == "add_client":
            state.current_action = "add_client"
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n–ò–º—è –§–∞–º–∏–ª–∏—è, –¢–µ–ª–µ—Ñ–æ–Ω, –î–∞—Ç–∞ (–î–î/–ú–ú/–ì–ì–ì–ì)")

        elif call.data == "change_client":
            state.phone = None
            state.current_action = None
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å–º–µ–Ω–∏–ª –∫–ª–∏–µ–Ω—Ç–∞")

        # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥
        if call.data not in ("add_bonus", "deduct_bonus", "add_client"):
            show_main_menu(chat_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–∞–º–∏
def process_bonus(message):
    chat_id = message.chat.id
    state = user_states[chat_id]

    try:
        amount = float(message.text)
        endpoint = 'add_bonus' if state.current_action == 'add_bonus' else 'deduct_bonus'
        url = f"{BASE_URL}/customers/{state.phone}/{endpoint}"
        response = requests.post(url, json={"amount": amount})

        if response.status_code == 200:
            bot.send_message(chat_id, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        elif response.status_code == 404:
            bot.send_message(chat_id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            state.phone = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        else:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {response.status_code}")

    except ValueError:
        bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    finally:
        state.current_action = None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
def process_add_client(message):
    chat_id = message.chat.id
    state = user_states[chat_id]

    try:
        parts = message.text.split(',')
        if len(parts) != 3:
            raise ValueError

        name, phone, birth_date = (p.strip() for p in parts)

        if not validate_phone(phone):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        if not validate_date(birth_date):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞")

        response = requests.post(f"{BASE_URL}/customers", json={
            "name": name,
            "phone": phone,
            "birth_date": birth_date
        })

        if response.status_code == 200:
            bot.send_message(chat_id, "‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
        elif response.status_code == 400:
            bot.send_message(chat_id, "‚ùå –ö–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")

    except ValueError as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
    finally:
        state.current_action = None


if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)