from server.transactions import add_bonus, deduct_bonus
from server.customers import get_customer_info, get_customer
from telebot import TeleBot, types
from bot.keyboards import numeric_keyboard, main_menu_keyboard
from bot.utils import validate_phone
from bot.handlers.auth import AUTHORIZED_USERS, user_input, current_client_phone, current_action
from bot.handlers.menu import show_customer_info,  show_short_customer_info # –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–º, –ª–∏–±–æ —Å–æ–∑–¥–∞–π —Ä—è–¥–æ–º


def register_transaction_handlers(tbot: TeleBot):

    @tbot.message_handler(func=lambda msg: msg.text in ["–ü–æ–ø–æ–ª–Ω–∏—Ç—å", "–°–ø–∏—Å–∞—Ç—å"])
    def handle_money_operation(message: types.Message):
        chat_id = message.chat.id
        if chat_id not in AUTHORIZED_USERS:
            tbot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        if message.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å":
            current_action[chat_id] = "add"
        elif message.text == "–°–ø–∏—Å–∞—Ç—å":
            current_action[chat_id] = "deduct"

        user_input[chat_id] = ""
        tbot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=numeric_keyboard())

    @tbot.callback_query_handler(func=lambda call: call.data.startswith("num_"))
    def handle_numeric_callback(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        action = call.data.split("_")[1]

        if chat_id not in user_input:
            user_input[chat_id] = ""

        if action.isdigit():
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ InlineKeyboardMarkup
            user_input[chat_id] += action
            try:
                tbot.edit_message_text(
                    f"–¢–µ–∫—É—â–∏–π –≤–≤–æ–¥: {user_input[chat_id]}",
                    chat_id,
                    call.message.message_id,
                    reply_markup=numeric_keyboard()
                )
            except Exception:
                pass  # –∏–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ
        elif action == "cancel":
            # –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞
            user_input.pop(chat_id, None)
            current_action.pop(chat_id, None)
            tbot.send_message(chat_id, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard())
        elif action == "done":
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone = user_input.pop(chat_id, "").strip()  # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –≤–≤–æ–¥
            if not validate_phone(phone):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
                tbot.edit_message_text(
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    chat_id,
                    call.message.message_id,
                    reply_markup=numeric_keyboard()
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            current_client_phone[chat_id] = phone

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            show_short_customer_info(chat_id, tbot, phone)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (add/deduct/info)
            operation = current_action.get(chat_id)
            if operation == "info":
                current_action.pop(chat_id, None)
                show_customer_info(chat_id, tbot, phone)
            elif operation in ("add", "deduct"):
                try:
                    tbot.send_message(
                        chat_id,
                        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {phone}:",
                        reply_markup=numeric_keyboard()
                    )
                except Exception:
                    pass  # –∏–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ

                tbot.register_next_step_handler_by_chat_id(
                    chat_id,
                    lambda m: process_amount(m, tbot, phone)
                )
            else:
                # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º
                tbot.send_message(
                    chat_id,
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=main_menu_keyboard()
                )
def process_amount(message: types.Message, tbot: TeleBot, phone: str):
    try:
        amount = float(message.text.replace(",", "."))
        operator = AUTHORIZED_USERS.get(message.chat.id)
        if not operator:
            tbot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        operation = current_action.get(message.chat.id)
        if operation == "deduct":
            deduct_bonus(phone, amount, operator)
            success_msg = f"üí∏ –°–ø–∏—Å–∞–Ω–æ {amount}‚ÇΩ —Å –∫–ª–∏–µ–Ω—Ç–∞ {phone}."
        elif operation == "add":
            add_bonus(phone, amount, operator)
            success_msg = f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ {amount}‚ÇΩ –∫–ª–∏–µ–Ω—Ç—É {phone}."
        else:
            tbot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        customer = get_customer_info(phone)
        tbot.send_message(message.chat.id, success_msg + "\n\n" +
                         f"üë§ –ò–º—è: {customer['name']}\n"
                         f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                         f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {customer['balance']}‚ÇΩ")

    except Exception as e:
        tbot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
