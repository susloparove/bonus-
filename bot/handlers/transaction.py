
from server.transactions import add_bonus, deduct_bonus
from telebot import TeleBot, types
from bot.keyboards import numeric_keyboard, main_menu_keyboard
from bot.utils import validate_phone
from bot.handlers.auth import AUTHORIZED_USERS, user_input, current_client_phone

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ)
current_operation = {}

def register_transaction_handlers(tbot: TeleBot):

    @tbot.message_handler(func=lambda msg: msg.text in ["–ü–æ–ø–æ–ª–Ω–∏—Ç—å", "–°–ø–∏—Å–∞—Ç—å"])
    def handle_money_operation(message: types.Message):
        chat_id = message.chat.id
        if chat_id not in AUTHORIZED_USERS:
            tbot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        if message.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å":
            current_operation[chat_id] = "add"
        elif message.text == "–°–ø–∏—Å–∞—Ç—å":
            current_operation[chat_id] = "deduct"

        user_input[chat_id] = ""
        tbot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=numeric_keyboard())

    @tbot.callback_query_handler(func=lambda call: call.data.startswith("num_"))
    def handle_numeric_callback(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        action = call.data.split("_")[1]

        if chat_id not in user_input:
            user_input[chat_id] = ""

        if action.isdigit():
            user_input[chat_id] += action
            tbot.edit_message_text(
                f"–¢–µ–∫—É—â–∏–π –≤–≤–æ–¥: {user_input[chat_id]}",
                chat_id,
                call.message.message_id,
                reply_markup=numeric_keyboard()
            )
        elif action == "cancel":
            user_input.pop(chat_id, None)
            tbot.edit_message_text(
                "–í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.",
                chat_id,
                call.message.message_id,
                reply_markup=None
            )
        elif action == "done":
            phone = user_input.pop(chat_id, "")
            if validate_phone(phone):
                current_client_phone[chat_id] = phone
                tbot.edit_message_text(
                    f"–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä: {phone}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
                    chat_id,
                    call.message.message_id
                )
                tbot.register_next_step_handler_by_chat_id(
                    chat_id,
                    lambda m: process_amount(m, tbot, phone)
                )
            else:
                tbot.edit_message_text(
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    chat_id,
                    call.message.message_id,
                    reply_markup=numeric_keyboard()
                )

def process_amount(message: types.Message, bot: TeleBot, phone: str):
    try:
        amount = float(message.text.replace(",", "."))
        operator = AUTHORIZED_USERS.get(message.chat.id)
        if not operator:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        operation = current_operation.get(message.chat.id)
        if operation == "deduct":
            # —Å–ø–∏—Å–∞–Ω–∏–µ
            deduct_bonus(phone, amount, operator)
            bot.send_message(message.chat.id, f"üí∏ –°–ø–∏—Å–∞–Ω–æ {amount}‚ÇΩ —Å –∫–ª–∏–µ–Ω—Ç–∞ {phone}.")
        elif operation == "add":
            # –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            add_bonus(phone, amount, operator)
            bot.send_message(message.chat.id, f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ {amount}‚ÇΩ –∫–ª–∏–µ–Ω—Ç—É {phone}.")
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")