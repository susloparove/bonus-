from telebot import TeleBot, types
import logging
from bot.keyboards import password_keyboard, main_menu_keyboard, seller_menu_keyboard, client_menu_keyboard
from server.users import authenticate_user_by_password, get_user_role
from server.customers import get_customer

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
AUTHORIZED_USERS = {}
user_password_input = {}
user_input = {}
user_data = {}
clients = []
current_client_phone = {}
current_action = {}  # chat_id -> "add" | "deduct" | "info"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


def show_main_menu(chat_id: int, tbot: TeleBot):
    username = AUTHORIZED_USERS.get(chat_id)
    if not username:
        tbot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=password_keyboard())
        return

    role = get_user_role(username)
    menu = main_menu_keyboard() if role == "admin" else seller_menu_keyboard()
    tbot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ({role.capitalize()}):", reply_markup=menu)


def register_auth_handlers(tbot: TeleBot):
    from fastapi import HTTPException  # –¥–æ–±–∞–≤—å –≤–≤–µ—Ä—Ö—É

    @tbot.message_handler(commands=['start'])
    def handle_start(message: types.Message):
        chat_id = message.chat.id
        args = message.text.split()

        if len(args) == 2:
            phone = args[1].strip()
            try:
                # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç
                get_customer(phone)

                # ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                AUTHORIZED_USERS[chat_id] = phone
                current_client_phone[chat_id] = phone

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –º–µ–Ω—é
                tbot.send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.",
                                  reply_markup=client_menu_keyboard())
            except HTTPException:
                tbot.send_message(chat_id, "‚ùå –ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except Exception as e:
                tbot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            if chat_id not in AUTHORIZED_USERS:
                handle_login(message)

    @tbot.message_handler(commands=['login'])
    def handle_login(message: types.Message):
        chat_id = message.chat.id
        AUTHORIZED_USERS.pop(chat_id, None)
        user_password_input[chat_id] = ""
        tbot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞):",
            reply_markup=password_keyboard()
        )

    @tbot.callback_query_handler(func=lambda call: call.data.startswith("password_"))
    def handle_password(call: types.CallbackQuery):
        tbot.answer_callback_query(call.id)
        chat_id = call.message.chat.id
        action = call.data.split("_")[1]

        if action == "cancel":
            AUTHORIZED_USERS.pop(chat_id, None)
            user_password_input.pop(chat_id, None)
            tbot.edit_message_text("–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ–Ω—ë–Ω.", chat_id, call.message.message_id)
            return

        if action == "done":
            password = user_password_input.get(chat_id, "")
            if not password:
                tbot.answer_callback_query(call.id, "–ü–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥—ë–Ω.")
                return

            try:
                username = authenticate_user_by_password(password)
                AUTHORIZED_USERS[chat_id] = username
                role = get_user_role(username)
                tbot.edit_message_text(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, {username}!\n–í–∞—à–∞ —Ä–æ–ª—å: {role}.",
                                       chat_id, call.message.message_id)
                show_main_menu(chat_id, tbot)
            except ValueError:
                user_password_input[chat_id] = ""
                tbot.send_message(
                    chat_id,
                    "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:",
                    reply_markup=password_keyboard()
                )
        else:
            user_password_input[chat_id] += action




