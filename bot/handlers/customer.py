from telebot import TeleBot, types
from bot.utils import validate_birth_date
from .auth import user_data, current_client_phone  # –¥–æ–±–∞–≤–∏–ª–∏ current_client_phone
from server.customers import get_customer_info, add_customer, list_customers

def register_customer_handlers(tbot: TeleBot):

    @tbot.message_handler(func=lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
    @tbot.message_handler(commands=['add'])
    def handle_add_customer(message: types.Message):
        tbot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
        tbot.register_next_step_handler(message, lambda m: process_name(m, tbot))

    def process_name(message: types.Message, tbot: TeleBot):
        user_data[message.chat.id] = {'name': message.text}
        tbot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        tbot.register_next_step_handler(message, lambda m: process_phone(m, tbot))

    def process_phone(message: types.Message, tbot: TeleBot):
        user_data[message.chat.id]['phone'] = message.text
        tbot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
        tbot.register_next_step_handler(message, lambda m: process_birth_date(m, tbot))

    def process_birth_date(message: types.Message, tbot: TeleBot):
        birth_date = message.text.strip()
        if not validate_birth_date(birth_date):
            tbot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            tbot.register_next_step_handler(message, lambda m: process_birth_date(m, tbot))
            return

        data = user_data[message.chat.id]
        phone = data["phone"]
        name = data["name"]

        try:
            # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            add_customer(phone, name, birth_date)

            # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            current_client_phone[message.chat.id] = phone

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info = get_customer_info(phone)
            tbot.send_message(
                message.chat.id,
                f"–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ\n"
                f"üë§ {info['name']}\n"
                f"üìû {phone}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {info['balance']}‚Çø\n\n"
                f"‚úÖ –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å —ç—Ç–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º."
            )
        except Exception as e:
            tbot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    @tbot.message_handler(commands=['list'])
    def handle_list_customers(message: types.Message):
        try:
            result = list_customers()
            if not result["customers"]:
                tbot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
                return

            response = "\n".join(result["customers"])
            tbot.send_message(message.chat.id, f"üìã –ö–ª–∏–µ–Ω—Ç—ã:\n{response}")
        except Exception as e:
            tbot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

    @tbot.message_handler(commands=['find'])
    def handle_find_customer(message: types.Message):
        tbot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
        tbot.register_next_step_handler(message, lambda m: process_find_customer(m, tbot))

    def process_find_customer(message: types.Message, tbot: TeleBot):
        phone = message.text.strip()
        try:
            info = get_customer_info(phone)
            msg = (f"üë§ –ò–º—è: {info['name']}\n"
                   f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                   f"üí∞ –ë–∞–ª–∞–Ω—Å: {info['balance']}‚Çø")
        except Exception as e:
            msg = f"‚ùå –û—à–∏–±–∫–∞: {e}"
        tbot.send_message(message.chat.id, msg)
