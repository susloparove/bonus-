from telebot import TeleBot, types
from server.customers import list_customers, get_customer
from bot.keyboards import numeric_keyboard, password_keyboard, main_menu_keyboard
from bot.handlers.auth import AUTHORIZED_USERS, current_client_phone, user_input, current_action, show_main_menu


def register_menu_handlers(tbot: TeleBot):
    @tbot.message_handler(func=lambda msg: msg.text == "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã")
    def handle_list_customers(message: types.Message):
        chat_id = message.chat.id

        if chat_id not in AUTHORIZED_USERS:
            tbot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=password_keyboard())
            return

        try:
            customers = list_customers()
            if not customers["customers"]:
                tbot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
                return

            result = "\n".join(customers["customers"])
            tbot.send_message(chat_id, f"üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã:\n\n{result}")
        except Exception as e:
            tbot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

    @tbot.message_handler(func=lambda msg: msg.text == "–ò–Ω—Ñ–æ –æ –∫–ª–∏–µ–Ω—Ç–µ")
    def handle_customer_info(message: types.Message):
        chat_id = message.chat.id
        phone = current_client_phone.get(chat_id)

        if chat_id not in AUTHORIZED_USERS:
            tbot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        if not phone:
            current_action[chat_id] = "info"
            user_input[chat_id] = ""
            tbot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=numeric_keyboard())
            return

        show_customer_info(chat_id, tbot, phone)

    @tbot.message_handler(func=lambda msg: msg.text == "–°–º–µ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
    def handle_change_client(message: types.Message):
        chat_id = message.chat.id
        current_client_phone.pop(chat_id, None)
        current_action.pop(chat_id, None)
        user_input[chat_id] = ""
        tbot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=numeric_keyboard())

    @tbot.message_handler(func=lambda msg: msg.text == "–í—ã—Ö–æ–¥")
    def handle_logout(message: types.Message):
        chat_id = message.chat.id
        AUTHORIZED_USERS.pop(chat_id, None)
        current_client_phone.pop(chat_id, None)
        current_action.pop(chat_id, None)
        user_input.pop(chat_id, None)
        tbot.send_message(chat_id, "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
        tbot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=password_keyboard())


def show_customer_info(chat_id, bot: TeleBot, phone: str):
    try:
        customer_info = get_customer(phone)
        customer = customer_info["customer"]
        transactions = customer_info["transactions"]

        last_ops = "\n".join([
            f"{'‚ûï' if t['type'] == 'add' else '‚ûñ'} {abs(t['amount'])}‚ÇΩ ‚Äî {t['timestamp']}"
            for t in transactions[-5:]
        ]) or "–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"

        msg = (
            f"üë§ <b>{customer['name']}</b>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n"
            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {customer['birth_date']}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{customer['balance']}‚ÇΩ</b>\n"
            f"\nüßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n{last_ops}"
        )
        bot.send_message(chat_id, msg, parse_mode="HTML")
        current_client_phone[chat_id] = phone

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


def show_short_customer_info(chat_id, bot: TeleBot, phone: str):
    try:
        customer = get_customer(phone)["customer"]
        msg = (
            f"üë§ –ò–º—è: <b>{customer['name']}</b>\n"
            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {customer['birth_date']}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{customer['balance']}‚ÇΩ</b>"
        )
        bot.send_message(chat_id, msg, parse_mode="HTML")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
