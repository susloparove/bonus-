from telebot import TeleBot, types
from server.customers import list_customers
from bot.keyboards import numeric_keyboard, password_keyboard
from bot.handlers.auth import AUTHORIZED_USERS, user_input, current_action
from server.logger import log_action
from server.log_viewer import get_action_log
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

def update_customer_field(message: types.Message, tbot: TeleBot, old_phone: str, field: str):
    customers = load_customers()
    chat_id = message.chat.id

    if old_phone not in customers:
        tbot.send_message(chat_id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    new_value = message.text.strip()
    operator = AUTHORIZED_USERS.get(chat_id)  # <<< –±–µ—Ä—ë–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if not operator:
        tbot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return

    old_value = customers[old_phone].get(field, "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)")

    if field == "phone":
        if new_value in customers:
            tbot.send_message(chat_id, "–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
        customers[new_value] = customers.pop(old_phone)
        current_client_phone[chat_id] = new_value
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º, –ø–µ—Ä–µ–¥–∞—ë–º —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        log_action(
            operator,
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            target=old_phone,
            details=f"{old_phone} ‚Üí {new_value}"
        )
    else:
        customers[old_phone][field] = new_value
        log_action(
            operator,
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è {field}",
            target=old_phone,
            details=f"{old_value} ‚Üí {new_value}"
        )

    save_customers(customers)
    tbot.send_message(chat_id, f"‚úÖ –ü–æ–ª–µ ¬´{field}¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {old_value} ‚Üí {new_value}")
def process_edit_choice(message: types.Message, tbot: TeleBot, phone: str):
    choice = message.text.strip().lower()

    if choice in ["1", "–∏–º—è"]:
        tbot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
        tbot.register_next_step_handler(message, lambda m: update_customer_field(m, tbot, phone, "name"))
    elif choice in ["2", "—Ç–µ–ª–µ—Ñ–æ–Ω"]:
        tbot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        tbot.register_next_step_handler(message, lambda m: update_customer_field(m, tbot, phone, "phone"))
    elif choice in ["3", "–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"]:
        tbot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
        tbot.register_next_step_handler(message, lambda m: update_customer_field(m, tbot, phone, "birth_date"))
    else:
        tbot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")

from server.customers import load_customers, save_customers

def build_log_keyboard(offset):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ûï –ï—â—ë 10", callback_data=f"morelog_{offset + 10}"))
    return markup

def show_log_page(bot: TeleBot, chat_id: int, offset: int = 0):
    if AUTHORIZED_USERS.get(chat_id) != "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        bot.send_message(chat_id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª–æ–≥.")
        return

    logs = get_action_log(limit=10, offset=offset)
    if not logs:
        bot.send_message(chat_id, "üì≠ –ë–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
        return

    text = "üìÑ <b>–ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π:</b>\n"
    for entry in reversed(logs):
        old_new = f" ({entry.get('details', '')})" if entry.get("details") else ""
        text += (
            f"üïì {entry['timestamp']}\n"
            f"üë§ {entry['user']} ‚Üí {entry['action']} {entry.get('amount') or ''}‚ÇΩ "
            f"–¥–ª—è {entry.get('target') or '‚Äî'}{old_new}\n\n"
        )
    bot.send_message(chat_id, text.strip(), parse_mode="HTML", reply_markup=build_log_keyboard(offset))

def register_menu_handlers(tbot: TeleBot):
    @tbot.message_handler(func=lambda msg: msg.text == "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã")
    def handle_list_customers(message: types.Message):
        chat_id = message.chat.id
        if chat_id not in AUTHORIZED_USERS:
            tbot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=password_keyboard())
            return
        try:
            customers = list_customers()
            if not customers["customers"]:
                tbot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
                return
            result = "\n".join(customers["customers"])
            tbot.send_message(chat_id, f"üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã:\n\n{result}")
        except Exception as e:
            tbot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

    @tbot.message_handler(func=lambda msg: msg.text == "–ò–Ω—Ñ–æ –æ –∫–ª–∏–µ–Ω—Ç–µ")
    def handle_customer_info(message: types.Message):
        chat_id = message.chat.id
        phone = current_client_phone.get(chat_id)

        if chat_id not in AUTHORIZED_USERS:
            tbot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        if not phone:
            current_action[chat_id] = "info"
            user_input[chat_id] = ""
            tbot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=numeric_keyboard())
            return

        show_customer_info(chat_id, tbot, phone)

    @tbot.callback_query_handler(func=lambda call: call.data.startswith("morelog_"))
    def handle_more_logs(call: types.CallbackQuery):
        offset = int(call.data.split("_")[1])
        show_log_page(tbot, call.message.chat.id, offset)

    @tbot.message_handler(func=lambda msg: msg.text == "üìÑ –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π")
    def handle_show_log(message: types.Message):
        show_log_page(tbot, message.chat.id, offset=0)

    # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –º–µ–Ω—é –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è...


    @tbot.message_handler(func=lambda msg: msg.text == "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è")
    def handle_share_client_link(message: types.Message):
        chat_id = message.chat.id
        phone = current_client_phone.get(chat_id)
        if not phone:
            tbot.send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞.")
            return

        from bot.utils import generate_deep_link, generate_qr_image

        link = generate_deep_link(phone)
        qr = generate_qr_image(link)

        tbot.send_photo(chat_id, photo=qr, caption=f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:\n{link}")

    @tbot.message_handler(func=lambda msg: msg.text == "–°–º–µ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
    def handle_change_client(message: types.Message):
        chat_id = message.chat.id
        current_client_phone.pop(chat_id, None)
        current_action.pop(chat_id, None)
        user_input[chat_id] = ""
        tbot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=numeric_keyboard())

    @tbot.message_handler(func=lambda msg: msg.text == "–í—ã—Ö–æ–¥")
    def handle_logout(message: types.Message):
        chat_id = message.chat.id
        AUTHORIZED_USERS.pop(chat_id, None)
        current_client_phone.pop(chat_id, None)
        current_action.pop(chat_id, None)
        user_input.pop(chat_id, None)
        tbot.send_message(chat_id, "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
        tbot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=password_keyboard())

    @tbot.message_handler(func=lambda msg: msg.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    def handle_client_info(message: types.Message):
        chat_id = message.chat.id
        phone = AUTHORIZED_USERS.get(chat_id)

        if not phone:
            tbot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        from server.customers import get_customer
        from bot.utils import format_customer_info
        try:
            info = get_customer(phone)
            text = format_customer_info(info, phone)
            tbot.send_message(chat_id, text)
        except Exception as e:
            tbot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @tbot.message_handler(func=lambda msg: msg.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
    def handle_edit_customer(message: types.Message):
        chat_id = message.chat.id
        from bot.handlers.auth import AUTHORIZED_USERS, current_client_phone
        phone = current_client_phone.get(chat_id)

        if chat_id not in AUTHORIZED_USERS or not phone:
            tbot.send_message(chat_id, "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞.")
            return

        tbot.send_message(chat_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n1. –ò–º—è\n2. –¢–µ–ª–µ—Ñ–æ–Ω\n3. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", reply_markup=None)
        tbot.register_next_step_handler(message, lambda m: process_edit_choice(m, tbot, phone))

    from server.log_viewer import get_action_log

    @tbot.message_handler(func=lambda msg: msg.text == "üìÑ –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π")
    def handle_show_log(message: types.Message):
        chat_id = message.chat.id
        if AUTHORIZED_USERS.get(chat_id) != "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":  # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏
            tbot.send_message(chat_id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª–æ–≥.")
            return

        try:
            logs = get_action_log(limit=10)
            if not logs:
                tbot.send_message(chat_id, "–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.")
                return

            text = "üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            for entry in reversed(logs):
                details = entry.get("details", "")
                amount = f"{entry['amount']}‚ÇΩ" if entry["amount"] is not None else ""
                line = (
                    f"üïì <b>{entry['timestamp']}</b>\n"
                    f"üë§ {entry['user']} ‚Üí {entry['action']} {amount} –¥–ª—è {entry['target'] or '‚Äî'}\n"
                )
                if details:
                    line += f"üìù <i>{details}</i>\n"
                text += line + "\n"

            tbot.send_message(chat_id, text.strip(), parse_mode="HTML")

        except Exception as e:
            tbot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}")


def show_customer_info(chat_id, bot: TeleBot, phone: str):
    try:
        customer_info = get_customer(phone)
        customer = customer_info["customer"]
        transactions = customer_info["transactions"]
        last_ops = "\n".join([
            f"{'‚ûï' if t['type'] == 'add' else '‚ûñ'} {abs(t['amount'])}‚Çø ‚Äî {t['timestamp']}"
            for t in transactions
        ]) or "–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"

        msg = (
            f"üë§ <b>{customer['name']}</b>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n"
            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {customer['birth_date']}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{customer['balance']}‚Çø</b>\n"
            f"\nüßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n{last_ops}"
        )
        bot.send_message(chat_id, msg, parse_mode="HTML")
        current_client_phone[chat_id] = phone

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


def show_short_customer_info(chat_id, bot: TeleBot, phone: str):
    try:
        customer = get_customer(phone)["customer"]
        msg = (
            f"üë§ –ò–º—è: <b>{customer['name']}</b>\n"
            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {customer['birth_date']}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{customer['balance']}‚Çø</b>"
        )
        bot.send_message(chat_id, msg, parse_mode="HTML")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

from server.customers import get_customer
from telebot import TeleBot, types
from bot.handlers.auth import current_client_phone

def register_client_info_handler(tbot: TeleBot):
    @tbot.message_handler(func=lambda msg: msg.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    def handle_client_info(message: types.Message):
        chat_id = message.chat.id
        phone = current_client_phone.get(chat_id)
        operator = AUTHORIZED_USERS.get(chat_id)  # <<< –∑–¥–µ—Å—å
        if not phone:
            tbot.send_message(chat_id, "‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
            return

        try:
            data = get_customer(phone)
            customer = data["customer"]
            transactions = data["transactions"]
            operator = AUTHORIZED_USERS.get(chat_id)  # <<< –∑–¥–µ—Å—å
            msg = (
                f"üë§ <b>{customer['name']}</b>\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n"
                f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {customer.get('birth_date', '‚Äî')}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{customer.get('balance', 0)}‚Çø</b>\n"
                f"\nüßæ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
            )

            if not transactions:
                msg += "–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
            else:
                for t in transactions:
                    sign = "‚ûï" if t["type"] == "add" else "‚ûñ"
                    msg += f"{sign} {abs(t['amount'])}‚Çø ‚Äî {t['timestamp']}\n"

            tbot.send_message(chat_id, msg, parse_mode="HTML")
        except Exception as e:
            tbot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


